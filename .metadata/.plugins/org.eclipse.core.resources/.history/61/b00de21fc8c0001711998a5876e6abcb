//============================================================================
// Name        : Queue.cpp
// Author      : Daniel McDonough
// Version     :
// Copyright   : Daniel McDonough 2017
// Description : Goblet_of_Fire Assignment for MBU 2017
//============================================================================

#include "Queue.h"
#include<stdio.h>

Queue::Queue(){
	this->length = 0;
	this->head = NULL;
	this->tail = NULL;
}
Queue::~Queue(){

}
//Push element in Queue
void Queue::push(string data) {
	head = this->head;
	tail = this-> tail;
	if (head == NULL) {
		Node* n= new Node;
		n->data = data;
		n->next = NULL;
		head = n;
		tail = n;

	} else {
		Node* n = new Node;
		n->data = data;
		tail = n;
		n->next = tail;
	}
	this->length++;
}

// Pop first element in Queue
void Queue::pop() {
	head = this->head;
	tail = this-> tail;
	srand ( time(NULL) ); //initialize the random seed
	string arrayNum[4] = {" Hufflepuff", " Ravenclaw", " Gryffindor", " Slytherin"};
	int RandIndex = rand() % 4; //generates a random number between 0 and 3

	if (head == NULL) {
		printf("\nThe Queue is empty.");

	} else if (head == tail) {
		// Case when there is only 1 element in the Queue
		cout << head->data << " left the line" << endl;
		cout<<"They are a "<< arrayNum[RandIndex] << endl;
		delete head;
		head = NULL;
		tail = NULL;

	} else {
		Node* n = new Node;
		n = head;
		head = head->next;
		cout << n->data << " left the line" << endl;
		cout<<"They are a "<< arrayNum[RandIndex] << endl;
		delete n;
	}
	this->length--;
}

//Show top-most element in Queue
void Queue::top() {
	head = this->head;
	if (head == NULL) {
		printf("\nThe Queue if empty");

	} else {
		cout<<"The next person in line is "<< head->data << endl;
	}
}

// Shows if the Queue is empty
bool Queue::isEmpty() {
	head = this->head;
	if(head == NULL) {
		printf("\nThe Queue is empty");
		return true;

	} else {
		printf("\nThe Queue is not empty");
		return false;
	}
}
void Queue::print(){
	Node* head = this->head;
	    int i = 1;
	    while(head){
	        std::cout << i << ": " << head->data << std::endl;
	        head = head->next;
	        i++;
	    }
}
void Queue::populate(){
	this->push("Harry");
	this->push("Arin");
	this->push("Ron");
	this->push("Gandalf"); //What is he doing here?
	this->push("Jon");
	this->push("MoldyWart");
	this->push("Snape");
	this->push("Dumbledore");
	this->push("Malfoy");
}
